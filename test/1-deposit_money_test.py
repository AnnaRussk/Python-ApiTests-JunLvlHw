from utils.utils import assert_status
import random

def generate_amount(max_digits=4):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Å—É–º–º—É —Ç–∏–ø–∞ float —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–Ω–∞–∫–æ–≤ (—Ü–∏—Ñ—Ä).
    –ü—Ä–∏–º–µ—Ä: max_digits=4 ‚Üí –º–æ–∂–µ—Ç –±—ã—Ç—å 12.3, 1.23, 999.9 –∏ —Ç.–¥.
    """
    while True:
        amount = round(random.uniform(1, 9999), 2)  # 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        if len(str(amount).replace('.', '').replace(',', '')) <= max_digits:
            return amount


class TestUpDeposit:
    def test_deposit_money_into_new_account(self, deposit_money):
        """
        Step 1. Create new user. –§–∏–∫—Ç—É—Ä–∞: create_new_user
        Step 2. Authenticate user and return Basic Auth header. –§–∏–∫—Ç—É—Ä–∞: user_auth
        Step 3. Create a new account. –§–∏–∫—Ç—É—Ä–∞: create_account
        Step 4. Deposits money into the user's account. –§–∏–∫—Ç—É—Ä–∞: deposit_money
        """
        amount = generate_amount()
        deposit_resp = deposit_money(amount=amount)

        assert_status(resp=deposit_resp, expected=200)
        assert deposit_resp["response"].json()["balance"] == amount
        transactions = deposit_resp["response"].json().get('transactions', [])
        assert transactions, "üì≠–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç"
        assert transactions[0]['amount'] == amount

        print(f'\n ‚úÖ –î–µ–ø–æ–∑–∏—Ç —é–∑–µ—Ä–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –Ω–∞: {amount}')
        # print(deposit_resp)       # Debag
