from faker import Faker
import random
from models.CreateUserRequest import CreateUserRequest


fake = Faker()



def user_factory(role="USER") -> CreateUserRequest:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ username, password –∏ role.
    """
    prefix = "aqa"
    max_len = 15

    """ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã """
    rest = ''.join(ch for ch in fake.user_name() if ch.isalnum())

    """ –£—Ä–µ–∑–∞–µ–º –∏–ª–∏ –¥–æ–ø–æ–ª–Ω—è–µ–º –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã """
    rest = rest[:max_len - len(prefix)]
    username = prefix + rest

    return CreateUserRequest(
        username=username,
        password="Qa1@secure!",     # üîê –í—Å–µ–≥–¥–∞ –≤–∞–ª–∏–¥–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ß–µ—Ä–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ù–ï–≤—Å–µ–≥–¥–∞
        role=role
    )



def users_factory(role: str = "USER", count: int = 1) -> list[dict]:
    """
    –§–∞–±—Ä–∏–∫–∞: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    Args:
        role: —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "USER").
        count: —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.

    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–ª—é—á–∞–º–∏ username, password, role.
    """
    prefix = "aqa"
    max_len = 15

    def _make_one() -> dict:
        rest = ''.join(ch for ch in fake.user_name() if ch.isalnum())
        rest = rest[:max_len - len(prefix)]
        username = prefix + rest
        return {
            "username": username,
            "password": "Qa1@secure!",
            "role": role
        }

    users = []
    for _ in range(count):
        users.append(_make_one())
    return users
    # return [_make_one() for _ in range(count)]




def generation_name():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è.
    """
    prefix = "QA"
    max_len = 8

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
    rest = ''.join(ch for ch in fake.user_name() if ch.isalnum())

    # –£—Ä–µ–∑–∞–µ–º –∏–ª–∏ –¥–æ–ø–æ–ª–Ω—è–µ–º –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
    rest = rest[:max_len - len(prefix)]
    profile_name = prefix + rest

    return profile_name



def generate_amount(max_digits: int = 4) -> float:
    if not isinstance(max_digits, int) or max_digits <= 0:
        raise ValueError("max_digits –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º")
    while True:
        amount = round(random.uniform(1, 9999), 2)
        # —Å—á–∏—Ç–∞–µ–º –í–°–ï —Ü–∏—Ñ—Ä—ã (—Ü–µ–ª–∞—è+–¥—Ä–æ–±–Ω–∞—è), —Ç–æ—á–∫—É –Ω–µ —Å—á–∏—Ç–∞–µ–º
        if len(str(amount).replace('.', '').replace(',', '')) <= max_digits:
            return amount



def generate_transfer_amount(max_digits: int = 2) -> float:
    # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É generate_amount, –Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç—Ä–æ–∂–µ
    return generate_amount(max_digits=max_digits)