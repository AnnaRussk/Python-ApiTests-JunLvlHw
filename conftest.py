""" Fixtures for tests
"""

import requests, pytest
from data.urls import *
from utils.utils import assert_status
from data.factories import user_factory
from data.user import admin_headers




@pytest.fixture
def create_new_user():
    """
    Fixture: Verify login with valid credentials.

    Steps:
        1.  Create a new user.
        2.  Send a login request.
        3.  Validate the status and token.

    Expected result:
        New user successful created.

    Returns:
         dict{str, str} with "username" and "password" keys.
    """
    user_data = user_factory()
    new_user_resp = requests.post(
        url=STAGE + ADMIN_URI,
        headers=admin_headers,
        json=user_data
    )

    assert new_user_resp.url, "üåê URL is empty!"
    assert_status(resp=new_user_resp, expected=201)

    user_name = new_user_resp.json().get("username")
    assert user_name, "üë§ Username is empty!"
    # Stored login and password
    return {
        "username": user_data["username"],
        "password": user_data["password"]
    }



@pytest.fixture
def user_auth(create_new_user) -> dict:
    """ Fixture: Authorization user

        Expected result:
            Authorization is successful.

        Returns:
            login, headline of authorization
    """
    login_user_resp = requests.post(
        url=STAGE + LOGIN_URI,
        json=create_new_user
    )

    assert_status(resp=login_user_resp, expected=200)
    auth_header = login_user_resp.headers.get('Authorization')
    assert auth_header, "üîë Authorization header is empty!"
    # Stored login and headline of authorization
    return {
        "auth_header": auth_header,
        "username": create_new_user,
    }


# Helper for account creation (fixture: create_account)
def create_account_data(user_auth):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Å–æ–∑–¥–∞—ë—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        user_auth (dict): —Å–æ–¥–µ—Ä–∂–∏—Ç 'auth_header' –∏ 'username'

    Returns:
        dict: –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (account_id, auth_header, username)
    """
    create_account_resp = requests.post(
        url=STAGE + ACCOUNTS_URI,
        headers={
            'Authorization': user_auth["auth_header"]
        }
    )

    assert_status(resp=create_account_resp, expected=201)
    assert create_account_resp.json().get('balance') == 0.0, "üí∞ Initial balance is not zero!"
    assert not create_account_resp.json().get('transactions'), "üìú Transactions list is not empty!"
    account_id = create_account_resp.json().get('id')
    # Stored account id, login and headline of authorization
    return {
        "account_id": account_id,
        "auth_header": user_auth["auth_header"],
        "username": user_auth["username"]
    }



@pytest.fixture
# Create a new account and return account_id, auth_header, username
def create_account(user_auth):
    """
    Fixture: —Å–æ–∑–¥–∞—ë—Ç –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        dict: –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (account_id, auth_header, username)
    """
    return create_account_data(user_auth)



@pytest.fixture
def deposit_money(create_account):
    """
    –§–∞–±—Ä–∏–∫–∞: –î–µ–ø–æ–∑–∏—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—á—ë—Ç –∏–ª–∏ –Ω–∞ —Å—á—ë—Ç –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä—ã 'create_account'.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
      - account_id: int | None
      - auth_header: str | None
      - amount: float (> 0)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: dict —Å id, auth_header, response
    """
    def _deposit(
            *,
            amount: float,
            account_id: int | None = None,
            auth_header: str | None = None
    ):
        assert amount > 0, "üí• –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0"

        """ –ï—Å–ª–∏ account_id –∏ auth_header –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ —è–≤–Ω–æ ‚Äî –±–µ—Ä—ë–º –∏–∑ create_account """
        acc_id = account_id if account_id is not None else create_account["account_id"]
        auth = auth_header if auth_header is not None else create_account["auth_header"]

        response = requests.post(
            url=STAGE + DEPOSIT_URI,
            headers={
                "Accept": "application/json",
                "Content-Type": "application/json",
                "Authorization": auth,
            },
            json={
                "id": acc_id,
                "balance": amount
            }
        )

        assert_status(resp=response, expected=200)
        return {
            "id": acc_id,
            "auth_header": auth,
            "response": response
        }
    return _deposit



@pytest.fixture
def transfer_money():
    """
    –§–∏–∫—Å—Ç—É—Ä–∞: –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥ –º–µ–∂–¥—É –¥–≤—É–º—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –§—É–Ω–∫—Ü–∏—é _transfer

    _transfer –ø—Ä–∏–Ω–∏–º–∞–µ—Ç:
        sender_account_id (int): ID –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.
        receiver_account_id (int): ID –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
        amount (float): –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π).
        auth_header (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        requests.Response: –æ—Ç–≤–µ—Ç API –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞.
    """
    def _transfer(
            *,
            sender_account_id: int,
            receiver_account_id: int,
            amount: float,
            auth_header: str
    ):
        response = requests.post(
            url=STAGE + TRANSFER_URI,
            headers={"Authorization": auth_header, "Content-Type": "application/json"},
            json={
                "senderAccountId": sender_account_id,
                "receiverAccountId": receiver_account_id,
                "amount": amount
            }
        )
        return response
    return _transfer


@pytest.fixture
def update_customer_profile(user_auth):
    """
    Fixture:
    - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—è.
    - –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å update_customer_profile(new_name="–ò–º—è") –≤ —Ç–µ—Å—Ç–∞—Ö.
    """
    def _update(new_name:str="New name 1"):
        update_resp = requests.put(
            url=STAGE + CUSTOMER_URI,
            headers={"Authorization": user_auth["auth_header"]},
            json={"name": new_name}
        )
        # print(f'update_resp =', update_resp.json())  # Debug

        assert_status(resp=update_resp, expected=200)

        return update_resp

    return _update



