""" Fixtures for tests
"""

import requests, pytest, time
from data.urls import *
from utils.utils import assert_status
from data.factories import user_factory
from data.user import admin_headers




@pytest.fixture
def create_new_user():
    """
    Fixture: Verify login with valid credentials.

    Steps:
        1.  Create a new user.
        2.  Send a login request.
        3.  Validate the status and token.

    Expected result:
        New user successful created.

    Returns:
         dict{str, str} with "username" and "password" keys.
    """
    user_data = user_factory()

    resp = requests.post(
        url=STAGE + ADMIN_URI,
        headers=admin_headers,
        json=user_data.model_dump()
    )

    assert resp.url, "üåê URL is empty!"
    assert_status(resp=resp, expected=201)

    user_name = resp.json().get("username")
    assert user_name, "üë§ Username is empty!"

    # Stored login and password
    return user_data



@pytest.fixture
def user_auth(create_new_user) -> dict:
    """ Fixture: Authorization user

        Expected result:
            Authorization is successful.

        Returns:
            login, headline of authorization
    """
    login_user_resp = requests.post(
        url=STAGE + LOGIN_URI,
        json=create_new_user.model_dump()
    )

    assert_status(resp=login_user_resp, expected=200)

    auth_header = login_user_resp.headers.get('Authorization')
    assert auth_header, "üîë Authorization header is empty!"

    # Stored login and headline of authorization
    return {
        "auth_header": auth_header,
        "username": create_new_user.username,
    }



@pytest.fixture
def create_account(user_auth):
    """
    Factory: —Å–æ–∑–¥–∞—ë—Ç –∞–∫–∫–∞—É–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict.
    –í—ã–∑–æ–≤:
        acc = create_account()                   # —Å user_auth
        acc = create_account(auth_header="...")  # –º–æ–∂–Ω–æ –ø–æ–¥–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω
    """
    def _create(auth_header: str | None = None) -> dict:
        auth = auth_header or user_auth["auth_header"]      # –í—ã–±–æ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ ‚Äî –ª–∏–±–æ –∏–∑ user_auth, –ª–∏–±–æ —è–≤–Ω—ã–π

        resp = requests.post(
            url=STAGE + ACCOUNTS_URI,
            headers={"Authorization": auth}
        )
        assert_status(resp=resp, expected=201)

        data = resp.json()
        assert data.get("balance") == 0.0, "üí∞ Initial balance is not zero!"
        assert not data.get("transactions"), "üìú Transactions list is not empty!"

        return {
            "account_id": data.get("id"),
            "auth_header": auth,
            "username": user_auth["username"],
        }

    return _create      # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é (—Ñ–∞–±—Ä–∏–∫—É)



@pytest.fixture
def get_balance():
    """
    Fixture/Factory:  Get balance by account id
    Expected result: Current balance by account
    Returns: float
    """
    def _balance(account_id: int, auth_header: str, retries: int = 1, delay: float = 0.5) -> float:
        """–í–µ—Ä–Ω—É—Ç—å –±–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞ –∏–∑ /customer/accounts.
        retries/delay –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã: –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏.
        """

        for i in range(max(1, retries)):
            request = requests.get(
                url=STAGE + CUSTOMER_ACCOUNTS_URI,
                headers={"Authorization": auth_header},
            )
            assert_status(request, 200)

            items = request.json()  # —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤

            for accounts in items:
                if accounts.get("id") == account_id:
                    balance = accounts.get("balance")
                    assert balance is not None, "–í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –ø–æ–ª—è balance"
                    return round(float(balance), 2)

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏ –µ—Å—Ç—å –µ—â—ë –ø–æ–ø—ã—Ç–∫–∏ ‚Äî –ø–æ–¥–æ–∂–¥—ë–º –∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            if i + 1 < retries:
                time.sleep(delay)

        raise AssertionError(f"–°—á—ë—Ç {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ /customer/accounts")

    return _balance



@pytest.fixture
def deposit_money(create_account):
    """
    –§–∞–±—Ä–∏–∫–∞: –î–µ–ø–æ–∑–∏—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—á—ë—Ç –∏–ª–∏ –Ω–∞ —Å—á—ë—Ç –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä—ã 'create_account'.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
      - account_id: int | None
      - auth_header: str | None
      - amount: float (> 0)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: dict —Å id, auth_header, response
    """
    def _deposit(
            *,
            amount: float,
            account_id: int | None = None,
            auth_header: str | None = None
    ):

        amount = round(float(amount), 2)

        assert amount > 0, "üí• –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0"

        # –ï—Å–ª–∏ account_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω ‚Äî —Å–æ–∑–¥–∞—ë–º –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π auth_header)
        if account_id is None:
            account = create_account(auth_header)
            acc_id = account["account_id"]
            auth = account["auth_header"]
        else:
            assert auth_header is not None, "üîë –ù—É–∂–µ–Ω auth_header –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ account_id"
            acc_id = account_id
            auth = auth_header

        response = requests.post(
            url=STAGE + DEPOSIT_URI,
            headers={
                "Accept": "application/json",
                "Content-Type": "application/json",
                "Authorization": auth,
            },
            json={
                "id": acc_id,
                "balance": amount
            }
        )

        assert_status(resp=response, expected=200)

        return {
            "id": acc_id,
            "auth_header": auth,
            "response": response
        }
    return _deposit



@pytest.fixture
def transfer_money():
    """
    –§–∏–∫—Å—Ç—É—Ä–∞: –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥ –º–µ–∂–¥—É –¥–≤—É–º—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –§—É–Ω–∫—Ü–∏—é _transfer

    _transfer –ø—Ä–∏–Ω–∏–º–∞–µ—Ç:
        sender_account_id (int): ID –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.
        receiver_account_id (int): ID –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
        amount (float): –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π).
        auth_header (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        requests.Response: –æ—Ç–≤–µ—Ç API –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞.
    """
    def _transfer(
            *,
            sender_account_id: int,
            receiver_account_id: int,
            amount: float,
            auth_header: str
    ):

        amount = round(float(amount), 2)

        response = requests.post(
            url=STAGE + TRANSFER_URI,
            headers={"Authorization": auth_header, "Content-Type": "application/json"},
            json={
                "senderAccountId": sender_account_id,
                "receiverAccountId": receiver_account_id,
                "amount": amount
            }
        )

        return response
    return _transfer



@pytest.fixture
def get_customer_profile():
    """
    Fixture factory: –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —é–∑–µ—Ä–∞ –ø–æ auth_header.
    """
    def _profile(auth_header: str) -> dict:
        resp = requests.get(
            url=STAGE + CUSTOMER_URI,
            headers={"Authorization": auth_header}
        )
        assert_status(resp, 200)

        return resp.json()
    return _profile



@pytest.fixture
def update_customer_profile(user_auth):
    """
    Fixture:
    Factory: –æ–±–Ω–æ–≤–∏—Ç—å –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É auth_header.
    –í—ã–∑–æ–≤: resp = update_customer_profile_for(auth_header, new_name)
    """
    def _update(auth_header: str, new_name:str):
        response = requests.put(
            url=STAGE + CUSTOMER_URI,
            headers={
                "Authorization": auth_header,
                "Content-Type": "application/json"
            },
            json={"name": new_name}
        )
        # print(f'response =', response.json())  # Debug
        assert_status(resp=response, expected=200)

        return response
    return _update



